一、线性结构：一对一的关系
	
 a. 数组、链表，可以在任意位置进行添加删除
 b. 受限的线性结构：
    1.栈   只允许在线性结构的一端进行添加删除，规定 先进后出
    2.队列 只允许在线性结构的两端端进行添加删除，规定 先进先出

二、树：
  a. 线性结构是：一对一的关系，
  b. 树是 一对多的关系，一个结点可以对应多个结点，并且具有递归特性，每个结点都可以是子树
  c. 结点的度： 结点所引出的分支的个数； 树的度，所有结点中最大的度。
  d. 叶子结点：  结点的度为0的结点
  e. 有直接关系的上层结点为双亲，有直接关系的下层结点为孩子
  f. 孩子存储结构：特点是存储的每个结点到其孩子的关系
     链式存储结构: 结点构造：一个指向第一个孩子，一个指向下一个兄弟
	 { int data, BTNode child, BTNode sibling} 
	 
  
二_1、二叉树： 
  a.受到约束的数: 每次结点最多有两个孩子点；给孩子规定次序：一个为左孩子，另一个为右孩子
  b. 满二叉树：除了最底层结点外，所有结点都要左右两个孩子。 高为h: 有 2^h -1 个结点
  c. 完全二叉树：是有满二叉树从右往左逐渐删除结点所得到的的二叉树。 
     结点数与高度的关系：2^(h-1)-1< n <=2^h -1 ==>  h=,log2(n),+1  |  h='log2(n+1)'
  d. 二叉树的一些性质：
     有： 总分支数 = 总结点数 - 1, 总结点数 = N0 + N1 + N2, 总分支数 = N1 + 2N2 
     得： N0 = N2 + 1  既：叶子结点数 = 双分支结点数 + 1
  e. 存储结构：	 
     完全二叉树 -- 顺序存储结构， 结点关系： 左孩子 = 2*a ; 右孩子 = 2*a +1
	 一般二叉树 -- 链式存储结构， 结点构造： { int data, BTNode lChild, BTNode rChild }
	 
  f. 遍历：
     1. 层次遍历（广度优先遍历）辅助的工具是队列
	 2. 深度优先遍历（先序、中序和后序）辅助的工具是 栈
	    先序：第一次访问某结点所得到的序列，总结：先访问根结点，然后先序遍历左子树，最后先序遍历右子树；
		中序：第二次访问某结点所得到的序列，总结：先中序遍历左子树，然后访问根结点，最后中序遍历右子树；
		后序：第三次访问某结点所得到的序列，总结：先后序遍历左子树，然后后序遍历右子树，最后访问根结点；
		