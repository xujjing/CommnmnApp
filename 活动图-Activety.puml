@startuml

'=======================================================================
'=======================================================================
'简单活动图
'活动标签(activity label)以冒号开始，以分号结束。
'文本格式支持creole wiki语法。
'活动默认安装它们定义的顺序就行连接。
/'
:Hello world;
:This is on defined on
several **lines**;
'/


'=======================================================================
'=======================================================================
'开始/结束
'你可以使用关键字start和stop表示图示的开始和结束
'也可以使用 end 关键字
/'
start
:Hello world;
:This is on defined on
several **lines**;
stop
'/


'=======================================================================
'=======================================================================
'条件语句
'在图示中可以使用关键字if，then和else设置分支测试。标注文字则放在括号中。
/'
start

if (Graphviz installed?) then (yes)
  :process all\ndiagrams;
else (no)
  :process only
  __sequence__ and __activity__ diagrams;
endif
stop
'/

'-------------------------------------------
'也可以使用关键字elseif设置多个分支测试。
'-------------------------------------------
/'
start
if (condition A) then (yes)
  :Text 1;
elseif (condition B) then (yes)
  :Text 2;
  stop
elseif (condition C) then (yes)
  :Text 3;
elseif (condition D) then (yes)
  :Text 4;
else (nothing)
  :Text else;
endif
stop
'/

'-------------------------------------------
'switch 选择语句 'split'   'split again'     'end split'
'-------------------------------------------
/'
:handleMsg;
split
:makeVas;
:loginMav();
split again
:handHead();
split again
:err(i);
:postEror(err);
split end
:Return response;
end
'/


'=======================================================================
'=======================================================================
'重复循环
'Do--While你可以使用关键字repeat和repeatwhile进行重复循环。
'-------------------------------------------
/'
start
repeat
  :read data;
  :generate diagrams;
repeat while (more data?) is (yes)
stop
'/

'-------------------------------------------
'while循环可以使用关键字while和end while进行while循环。
'还可以在关键字endwhile后添加标注，还有一种方式是使用关键字is。
'-------------------------------------------
/'
start
while (check filesize ?) is (not empty)
  :read data;
  :generate diagrams;
endwhile(empty)
:next;
stop
'/


'=======================================================================
'=======================================================================
'并行处理
'你可以使用关键字fork，fork again和end fork表示并行处理。
/'
start
if (multiprocessor?) then (yes)
  fork
	:Treatment 1;
  fork again
	:Treatment 2;
  end fork
else (monoproc)
  :Treatment 1;
  :Treatment 2;
endif
:next;
stop
'/

'=======================================================================
'=======================================================================
'注释  A note can be floating, using floating keyword.
'文本格式支持creole wiki语法。
/'
start
:foo1;
floating note left: This is a note
:foo2;
note right
  This note is on several
  //lines// and can
  contain <b>HTML</b>
  ====
  * Calling the method ""foo()"" is prohibited
end note
stop
'/


'=======================================================================
'=======================================================================
'箭头
'使用->标记，你可以给箭头添加文字或者修改箭头颜色。
'同时，你也可以选择点状 (dotted)，条状(dashed)，加粗或者是隐式箭头
/'
:foo1;
-> You can put text on arrows;
if (test) then
  -[#blue]->
  :foo2;
  -[#green,dashed]-> The text can
  also be on several lines
  and **very** long...;
  :foo3;
else
  -[#black,dotted]->
  :foo4;
endif
-[#gray,bold]->
:foo5;
'/


'=======================================================================
'=======================================================================
'分离(detach)
'可以使用关键字detach移除箭头。
/'
:start;
 fork
   :foo1;
   :foo2;
 fork again
   :foo3;
   detach
 endfork
 if (foo4) then
   :foo5;
   detach
 endif
 :foo6;
 detach
 :foo7;
 stop
'/

'=======================================================================
'=======================================================================
'组合(grouping)
'通过定义分区(partition)，你可以把多个活动组合(group)在一起。
/'
start
:开始播放;
:ffp_prepare_async_l;
:stream_open;
note right
  1. 创建存放音视频解码前数据的videoq/audioq
  2. 创建存放音视频解码后数据的pictq/sampq
  3. 启动数据线程read_thread
  4. 启动视频显示线程video_refresh_thread
end note
fork
	partition read_thread {
    	:avformat_alloc_context;
    	:av_find_input_format;
    	:avformat_open_input;
    	:av_format_find_stream_info;
    	:stream_component_open;
    	note left
            1. 启动视频解码线程
            2. 启动音频解码解码
        end note
        }
fork again
    partition video_refresh_thread {
       :remaining_time = 0.0;
       while (abort)
           :frame_queue_peek;
           -[#blue,dashed]->
           #Orange:get   picture  queue<
           :video_display2|
           : OpenGlES
               Suface}
       endwhile(yes)
       end
       }
fork again

      partition sdl_audio_callback {
         :frame_queue_peek;
         -[#blue,dashed]->
         #Orange:get   audio  queue<
         :AudioTrack
         OpenSLES}
         detach
      }
end fork
split
      partition read_thread {
          while (abort)
              :av_read_frame|
              :packet_queue_put;
              -[#blue,dashed]->
              #HotPink:put   video  queue<
              -[#blue,dashed]->
              #HotPink:put   audio  queue<
          endwhile(yes)
      }
split again
     partition video_tread {
         while (abort)
             :packet_queue_get;
             -[#blue,dashed]->
             #HotPink:get   video  queue<
             :avcodec_decode_video2|
            :frame_queue_push;
            -[#blue,dashed]->
             #Orange:put   picture  queue<
         endwhile(yes)
     }
split again
     partition audio_tread {
         while (abort)
             :packet_queue_get;
             -[#blue,dashed]->
             #HotPink:get   audio  queue<
             :avcodec_decode_audio-4|
            :frame_queue_push;
            -[#blue,dashed]->
             #Orange:put   sample  queue<
         endwhile(yes)
     }
end split

end
/'

'=======================================================================
'=======================================================================
'特殊领域语言(SDL) '|'  '<'   '>'   '/'   ']'   '}'
'通过修改活动标签最后的分号分隔符(;)，可以为活动设置不同的形状。
/'
:Ready;
:next(o)|
:Receiving;
split
 :nak(i)<
 :ack(o)>
split again
 :ack(i)<
 :next(o)
 on several line|
 :i := i + 1]
 :ack(o)>
split again
 :err(i)<
 :nak(o)>
split again
 :foo/
split again
 :i > 5}
stop
end split
:finish;
'/

'=======================================================================
'=======================================================================
'一个完整的例子
/'
start
:ClickServlet.handleRequest();
:new page;
if (Page.onSecurityCheck) then (true)
  :Page.onInit();
  if (isForward?) then (no)
	:Process controls;
	if (continue processing?) then (no)
	  stop
	endif

	if (isPost?) then (yes)
	  :Page.onPost();
	else (no)
	  :Page.onGet();
	endif
	:Page.onRender();
  endif
else (false)
endif

if (do redirect?) then (yes)
  :redirect process;
else
  if (do forward?) then (yes)
	:Forward request;
  else (no)
	:Render page template;
  endif
endif
stop
'/

@enduml